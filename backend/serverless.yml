service: sls-hackaton
provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: ${env:sls_stage}-hackaton

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb-autoscaling
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    LoanBooks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LoanBooks-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: objectID
            AttributeType: S
        KeySchema:
          - AttributeName: objectID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Reservations:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Reservations-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: objectID
            AttributeType: S
        KeySchema:
          - AttributeName: objectID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  capacities:
    - table: LoanBooks
      read:
        minimum: 1
        maximum: 20
        usage: 0.75
      write:
        minimum: 1
        maximum: 5
        usage: 0.75
    - table: Reservations
      read:
        minimum: 1
        maximum: 20
        usage: 0.75
      write:
        minimum: 1
        maximum: 5
        usage: 0.75

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
