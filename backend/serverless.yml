service: sls-hackaton
provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: ${env:sls_stage}-hackaton

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb-autoscaling
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

functions:
  getUserBorrowed:
    name: getUserBorrowed-${self:provider.stage}
    handler: getUserBorrowed.handler
    memorySize: 256
    environment:
      STORE_DB_NAME: ${self:resources.Resources.LoanBooks.Properties.TableName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:*:*:table/${self:resources.Resources.LoanBooks.Properties.TableName}
    tags:
      owner: ${self:provider.stage}
    events:
      - http:
          path: /booksloan/{userName}
          method: get
          integration: lambda
          reqValidatorName: lambdaRequestValidator
          request:
            parameters:
              paths:
                userName: true
            passThrough: NEVER
            template:
              application/json: '{ "userName" : "$input.params(''userName'')" }'
  getBookState:
    name: getBookState-${self:provider.stage}
    handler: getBookState.handler
    memorySize: 256
    environment:
      STORE_DB_NAME: ${self:resources.Resources.LoanBooks.Properties.TableName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:*:*:table/${self:resources.Resources.LoanBooks.Properties.TableName}
    tags:
      owner: ${self:provider.stage}
    events:
      - http:
          path: /booksloan/{bookId}
          method: get
          integration: lambda
          reqValidatorName: lambdaRequestValidator
          request:
            parameters:
              paths:
                bookId: true
            passThrough: NEVER
            template:
              application/json: '{ "bookId" : "$input.params(''bookId'')" }'
  getBookReservations:
    name: getBookReservations-${self:provider.stage}
    handler: getBookReservations.handler
    memorySize: 256
    environment:
      STORE_DB_NAME: ${self:resources.Resources.Reservations.Properties.TableName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:*:*:table/${self:resources.Resources.Reservations.Properties.TableName}
    tags:
      owner: ${self:provider.stage}
    events:
      - http:
          path: /reservations/{bookId}
          method: get
          integration: lambda
          reqValidatorName: lambdaRequestValidator
          request:
            parameters:
              paths:
                bookId: true
            passThrough: NEVER
            template:
              application/json: '{ "bookId" : "$input.params(''bookId'')" }'
  getUserReserved:
    name: getUserReserved-${self:provider.stage}
    handler: getUserReserved.handler
    memorySize: 256
    environment:
      STORE_DB_NAME: ${self:resources.Resources.Reservations.Properties.TableName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:*:*:table/${self:resources.Resources.Reservations.Properties.TableName}
    tags:
      owner: ${self:provider.stage}
    events:
      - http:
          path: /reservations/{userName}
          method: get
          integration: lambda
          reqValidatorName: lambdaRequestValidator
          request:
            parameters:
              paths:
                userName: true
            passThrough: NEVER
            template:
              application/json: '{ "userName" : "$input.params(''userName'')" }'

resources:
  Resources:
    lambdaRequestValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'searchrRequestValidator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true
    
    LoanBooks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LoanBooks-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: bookName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
          - AttributeName: bookId
            KeyType: RANGE
          - AttributeName: bookName
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Reservations:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Reservations-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
          - AttributeName: bookId
            AttributeType: S
          - AttributeName: bookName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
          - AttributeName: bookId
            KeyType: RANGE
          - AttributeName: bookName
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

custom:
  capacities:
    - table: LoanBooks
      read:
        minimum: 1
        maximum: 20
        usage: 0.75
      write:
        minimum: 1
        maximum: 5
        usage: 0.75
    - table: Reservations
      read:
        minimum: 1
        maximum: 20
        usage: 0.75
      write:
        minimum: 1
        maximum: 5
        usage: 0.75
